{"version":3,"sources":["Rules.js","utils/string.js","Results.js","utils/utils.js","Gasp.js","Cape.js","utils/config.js","utils/sheet.js","App.js","serviceWorker.js","index.js"],"names":["Rules","props","display","_","forEach","ruleset","rule","id","out","key","parser","toReact","push","className","string","Strings","Results","pinglist","join","map","list","name","keywords","results","text","format","toSet","array","Set","splitString","obj","split","Gasp","breedGenderDropdown","typeRadio","resellToggle","keywordCheckboxes","resultingList","useState","breedGender","setBreedGender","type","setType","resell","setResell","setKeywords","loading","handleTypeChange","e","value","handleKeywordChange","newState","clone","rules","strings","sheet","filters","output","Object","getOwnPropertyNames","t","length","substring","isNaN","Number","getRules","en","bgOptions","Breed","val","typeOptions","Type","keywordOptions","Keywords","Dropdown","placeholder","gaspbg","fluid","selection","options","onChange","Form","Radio","label","checked","Checkbox","toggle","k","keywordsSelected","keys","onClick","refresh","users","selected","filter","user","blacklist","whitelist","has","wl","bl","console","log","filterUsers","visible","Cape","setSelected","flatten","values","apiKey","discoverDocs","capeSheetId","gaspSheetId","tlSheetId","clientId","spreadsheetId","error","callback","response","result","mapHeaders","a","shift","App","initClient","gapi","client","init","config","discoveryDocs","scope","then","loadData","setGasp","load","sheets","spreadsheets","get","range","majorDimension","header","loadCape","setCape","headers","toLowerCase","line","loadStrings","setStrings","data","setState","gasp","cape","state","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"u3BAuBeA,MAlBf,SAAeC,GACb,IAAIC,EAAU,GAUd,OARAC,IAAEC,QAAQH,EAAMI,SAAS,SAACC,EAAMC,GAC9B,IAAIC,EACS,KAATF,IACFE,EAAM,0BAAMC,IAAK,OAAOF,GAAKG,IAAOC,QAAQL,GAAM,8BAClDJ,EAAQU,KAAKJ,OAKf,yBAAKK,UAAU,SACXX,I,kBChBO,SAASY,EAAOL,GAC7B,OAAOM,EAAQN,G,aCoBFO,MAjBf,SAAiBf,GACf,IAAIgB,EAAWC,eAAKC,cAAIlB,EAAMmB,MAAM,SAACC,GAAD,MAAU,IAAMA,KAAO,KACvDC,EAAWJ,eAAKjB,EAAMqB,SAAU,MAChCC,EAAUtB,EAAMuB,KAAOF,EAAWG,EAAO,WAAaR,EAAWQ,EAAO,WAE5E,OACE,yBAAMZ,UAAU,WACd,kBAAC,kBAAD,CAAiBW,KAAMD,GACvB,yCAEA,6BACCA,K,oCCjBA,SAASG,EAAMC,GACpB,OAAO,IAAIC,IAAID,GCkKjB,SAASE,EAAYC,EAAKrB,GACxB,OAAOiB,EAAMI,EAAIrB,GAAKsB,MAAM,OAEfC,MA9Jf,SAAc/B,GAAQ,IA4BhBgC,EAAqBC,EAAWC,EAAcC,EAAmBC,EAqG9CV,EAjIJ,EACiBW,mBAAS,MAD1B,mBACdC,EADc,KACDC,EADC,OAEGF,mBAAS,MAFZ,mBAEdG,EAFc,KAERC,EAFQ,OAGOJ,oBAAS,GAHhB,mBAGdK,EAHc,KAGNC,EAHM,OAIWN,mBAAS,CAAChB,SAAU,KAJ/B,mBAIdA,EAJc,KAIJuB,EAJI,KAKfC,GAAU,EAGRC,EAAmB,SAACC,EAAD,OAAMC,EAAN,EAAMA,MAAN,OAAkBP,EAAQO,IAE7CC,EAAsB,SAACF,EAAD,GAAmB,IAAbC,EAAY,EAAZA,MAC5BE,EAAWC,gBAAM9B,GACjB6B,EAAS7B,SAAS2B,UACbE,EAAS7B,SAAS2B,GAGzBE,EAAS7B,SAAS2B,GAASA,EAE7BJ,EAAYM,IASVE,EAAQ,GAEZ,GAAGpD,EAAMqD,SAAWrD,EAAMsD,MAAO,CAC/BT,GAAU,EACV,IAAIU,EAAUvD,EAAMsD,MAAMC,QAC1BH,EAoFJ,SAAkBvB,GAGhB,IAAI2B,EAAS,GAHQ,uBAKrB,YAAcC,OAAOC,oBAAoB7B,GAAzC,+CAA+C,CAAC,IAAvC8B,EAAsC,QACzCA,EAAEC,OAAS,GAA2B,SAAtBD,EAAEE,UAAU,EAAG,KAAkBC,MAAMC,OAAOJ,EAAEE,UAAU,MAC5EL,EAAO7C,KAAKkB,EAAI8B,KAPC,kFAUrB,OAAOH,EA9FGQ,CAAShE,EAAMqD,QAAQY,IAC/B,IAAIC,GAgGiBxC,EAhGW6B,EAAQY,MAiGnCjD,cAAIQ,GAAO,SAAC0C,GAAS,MAAO,CACjC5D,IAAK4D,EACLpB,MAAOoB,EACP7C,KAAM6C,OAnGFC,EAAcd,EAAQe,KACtBC,EAAiBhB,EAAQiB,SAE7BxC,EACE,yBAAKpB,UAAU,uBACb,kBAAC6D,EAAA,EAAD,CACAC,YAAa1E,EAAMqD,QAAQY,GAAGU,OAC9BC,OAAK,EACLC,WAAS,EACTC,QAASZ,EACTa,SArCiB,SAAChC,EAAD,OAAMC,EAAN,EAAMA,MAAN,OAAkBT,EAAeS,OAuCtDf,EAAY,kBAAC+C,EAAA,EAAD,CAAMpE,UAAU,QAC1B,yBAAKA,UAAU,SAAf,yBACA,yBAAKA,UAAU,cACdM,cAAImD,GAAa,SAAAV,GAAC,OACf,kBAACsB,EAAA,EAAD,CACErE,UAAU,QACVJ,IAAKmD,EACLuB,MAAOvB,EACPvC,KAAK,YACL4B,MAAOW,EACPwB,QAAS3C,IAASmB,EAClBoB,SAAUjC,SAKlBZ,EAAe,kBAACkD,EAAA,EAAD,CACGxE,UAAU,SACVyE,QAAM,EACNH,MAAM,qBACNC,QAASzC,EACTqC,SA1DO,SAAChC,EAAD,KAAMC,MAAN,OAAkBL,GAAWD,MA2DtDP,EAAoB,yBAAKvB,UAAU,mBAAkB,kBAACoE,EAAA,EAAD,CAAMpE,UAAU,8BAClEM,cAAIqD,GAAgB,SAAAe,GAAC,OAClB,kBAACF,EAAA,EAAD,CACExE,UAAU,WACVJ,IAAK8E,EACLJ,MAAOI,EACPlE,KAAK,eACL4B,MAAOsC,EACPH,QAAS9D,EAASiE,GAClBP,SAAU9B,SAMpB,IAAIsC,EAAmBjD,GAAeE,GAAmB,OAAXE,GAAmB8C,eAAKnE,EAASA,UAAUuC,OAAS,EAG9FtC,GADY,8BACF,+BAad,OAVIuB,GAAW0C,IACD,yBAAK3E,UAAU,WACb,4BAAQ6E,QAASzF,EAAM0F,SAAvB,wCAEdtD,EA6CJ,SAAqBuD,EAAOrD,EAAaE,EAAME,EAAQrB,GACrD,IAAIuE,EAAWnE,EAAM+D,eAAKnE,IACtBmC,EAAStC,cAAI2E,iBAAOF,GAAO,SAAAG,GAC7B,IAAIC,EAAYD,EAAKC,UAAYD,EAAKC,UAAUjE,MAAM,MAAQ,GAC1DkE,EAAYF,EAAKE,UAAUlE,MAAM,MAErC,OAAOF,EAAYkE,EAAM,QAAQG,IAAIzD,IAChCZ,EAAYkE,EAAM,SAASG,IAAI3D,IAC/BuD,iBAAOG,GAAW,SAAAE,GAAE,MAAW,kBAAPA,GAA0BN,EAASK,IAAIC,MAAKtC,OAAS,KAC3ElB,GAAUjB,EAAMsE,GAAWE,IAAI,YACoB,IAArDJ,iBAAOE,GAAW,SAAAI,GAAE,OAAIP,EAASK,IAAIE,MAAKvC,UAC7C,QAGJ,OADAwC,QAAQC,IAAI7C,GACLA,EA3DW8C,CAAYtG,EAAMsD,MAAMqC,MAAOrD,EAAaE,EAAME,EAAQrB,EAASA,UACnFC,EAAU,kBAAC,EAAD,CAASV,UAAU,UAAU2F,SArExB,EAqE6ChF,KAAMC,EAAO,cAAeH,SAzExE,GAyE+FF,KAAMiB,KAMrH,yBAAKxB,UAAU,QACb,kBAAC,EAAD,CAAOA,UAAU,aAAaR,QAASgD,IACvC,yBAAKxC,UAAU,SACb,yBAAKA,UAAU,qBACZoB,EACAE,EACAD,EACAE,GAGFb,K,OCrDMkF,MA1Df,SAAcxG,GAAQ,IAEhBqB,EAFe,EACWgB,mBAAS,IADpB,mBACduD,EADc,KACJa,EADI,KAIJ,MAAZb,IACDa,EAAY,MACZpF,EAAWqF,kBAAQjD,OAAOkD,OAAOf,KAEnC,IAEIxC,EAAQ,GAKZ,OAJGpD,EAAMqD,UACPD,EAaJ,SAAkB1B,GAChB0E,QAAQC,IAAI3E,GACZ,IAiBI8B,EAAS,GAWb,OAJAtC,cAxBa,CACX,QACA,eACA,aACA,iBACA,aACA,cACA,mBACA,YACA,YACA,YACA,YACA,YACA,YACA,cAUS,SAAAb,GACTmD,EAAO7C,KAAKe,EAAMrB,OAGbmD,EA3CGQ,CAAShE,EAAMqD,QAAQY,KAI/B,yBAAKrD,UAAU,QACb,kBAAC,EAAD,CAAOR,QAASgD,IAChB,yBAAKxC,UAAU,wBAEf,kBAAC,EAAD,CAAS2F,SAAS,EAAMhF,KAAMC,EAAO,cAAeH,SAAUA,EAAUF,KAZxD,OCfP,GACbyF,OAAQ,0CACRC,aAAc,CAAC,4DACfC,YAAa,+CACbC,YAAa,+CACbC,UAAW,+CACXC,SAAU,2EACVC,cAAe,gD,QCwFjB,SAASC,EAAMC,EAAUC,GACvB,OAAOD,GAAS,EAAOC,EAASC,OAAOH,OAIzC,SAASI,EAAW7F,EAAO8B,GACzBtC,cAAIQ,GAAO,SAAA8F,GAAC,OAAIhE,EAAOgE,EAAEC,SAAWD,K,ICbvBE,E,YAzEb,aAAe,IAAD,8BACZ,+CAWFC,WAAa,WACXC,IAAKC,OAAOC,KAAK,CACflB,OAAQmB,EAAOnB,OACfoB,cAAeD,EAAOC,cACtBf,SAAUc,EAAOd,SACjBgB,MAAO,0DACNC,MAAK,WACN,EAAKC,cACJ,SAAAd,GAAQ,OAAIjB,QAAQC,IAAIgB,OApBf,EAuBdc,SAAW,WDlCN,IAAkBf,ICmCZ,EAAKgB,QDlChBR,IAAKC,OAAOQ,KAAK,SAAU,MAAM,WAC/B,IAAI1B,EAASiB,IAAKC,OAAOS,OAAOC,aAAa5B,OACzCnD,EAAS,CAACD,QAAS,IACrBoD,EAAO6B,IAAI,CACTtB,cAAea,EAAOhB,YACtB0B,MAAO,uBACPC,eAAgB,YAEjBR,MACC,SAAAb,GACEE,EAAWF,EAASC,OAAOX,OAAQnD,EAAOD,SAC1CoD,EAAO6B,IAAI,CACTtB,cAAea,EAAOhB,YACtB0B,MAAO,oBAERP,MACC,SAAAb,GACE,IAAIsB,EAAStB,EAASC,OAAOX,OAAOc,QACpCjE,EAAOmC,MAAQzE,cAAImG,EAASC,OAAOX,QAAQ,SAAAb,GACzC,IAAIvF,EAAM,GAQV,OANAA,EAAIoI,EAAO,IAAM7C,EAAK,GACtBvF,EAAIoI,EAAO,IAAM7C,EAAK,GACtBvF,EAAIoI,EAAO,IAAM7C,EAAK,GACtBvF,EAAIoI,EAAO,IAAM7C,EAAK,GACtBvF,EAAIoI,EAAO,IAAM7C,EAAK,GAEfvF,KACT6G,EAAS5D,MAEX,SAAA6D,GAAQ,OAAIF,EAAMC,EAAUC,SAEpC,SAAAA,GAAQ,OAAIF,EAAMC,EAAUC,SAIzB,SAAkBD,GACvBQ,IAAKC,OAAOQ,KAAK,SAAU,MAAM,WAC/B,IAAI1B,EAASiB,IAAKC,OAAOS,OAAOC,aAAa5B,OACzCnD,EAAS,CAACD,QAAS,IACvBoD,EACG6B,IAAI,CACHtB,cAAea,EAAOjB,YACtB2B,MAAO,uBACPC,eAAgB,YAEjBR,MACC,SAAAb,GACEE,EAAWF,EAASC,OAAOX,OAAQnD,EAAOD,SAC1CoD,EAAO6B,IAAI,CACTtB,cAAea,EAAOjB,YACtB2B,MAAO,oBAERP,MACC,SAAAb,GACE7D,EAAOmC,MAAQ0B,EAASC,OAAOX,OAC/BS,EAAS5D,MAEX,SAAA6D,GAAQ,OAAIF,EAAMC,EAAUC,SAEhC,SAAAA,GAAQ,OAAIF,EAAMC,EAAUC,SCzBhCuB,CAAS,EAAKC,SD6BX,SAAqBzB,GAC1BQ,IAAKC,OAAOQ,KAAK,SAAU,MAAM,WAC/B,IAAI1B,EAASiB,IAAKC,OAAOS,OAAOC,aAAa5B,OACzCnD,EAAS,GACbmD,EACG6B,IAAI,CACHtB,cAAea,EAAOf,UACtByB,MAAO,gBAERP,MACC,SAAAb,GAEE,IAAIyB,GADJzB,EAAWA,EAASC,OAAOX,QACJc,QACvBvG,cAAImG,GAAU,SAACjH,GACb,IAAII,EAAMJ,EAAQ,GAAG2I,cACrBvF,EAAOhD,GAAO,GACdL,kBAAQC,GAAS,SAAC4I,EAAM1I,GACtBkD,EAAOhD,GAAKsI,EAAQxI,IAAO0I,QAG/B5B,EAAS5D,MAEX,SAAA6D,GAAQ,OAAIF,EAAMC,EAAUC,SClDhC4B,CAAY,EAAKC,aA1BL,EA6Bdd,QAAU,SAACe,EAAMhC,GACff,QAAQC,IAAIc,GACTA,EACDf,QAAQC,IAAIc,GAGZ,EAAKiC,SAAS,CAACC,KAAMF,KAnCX,EAsCdN,QAAU,SAACM,EAAMhC,GACZA,EACDf,QAAQC,IAAIc,GAGZ,EAAKiC,SAAS,CAACE,KAAMH,KA3CX,EA8CdD,WAAa,SAACC,EAAMhC,GACfA,EACDf,QAAQC,IAAIc,GAGZ,EAAKiC,SAAS,CAAC/F,QAAS8F,KAjD1B,EAAKI,MAAQ,CACXF,KAAM,KACNC,KAAM,KACNjG,QAAS,MALC,E,iFASZuE,IAAKS,KAAK,SAAUmB,KAAK7B,c,+BA+CzB,OAAO,yBAAK/G,UAAU,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,cAGF,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAM8E,QAAS8D,KAAKrB,SAAU7E,MAAOkG,KAAKD,MAAMF,KAAMhG,QAASmG,KAAKD,MAAMlG,WAE5E,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAMC,MAAOkG,KAAKD,MAAMD,KAAMjG,QAASmG,KAAKD,MAAMlG,iB,GAnE5CoG,IAAMC,WCFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.4e3dd079.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Rules.css';\r\nimport parser from 'bbcode-to-react';\r\nimport _ from 'lodash';\r\n\r\nfunction Rules(props) {\r\n  let display = [];\r\n  \r\n  _.forEach(props.ruleset, (rule, id) => {\r\n    let out;\r\n    if (rule !== \"\" ) {\r\n      out = <span key={\"rule\"+id}>{parser.toReact(rule)}<br /></span>;\r\n      display.push(out);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"Rules\">\r\n      { display }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Rules;\r\n","import Strings from './en.json';\r\n\r\nexport default function string(key) {\r\n  return Strings[key];\r\n};","import React from 'react';\r\nimport './Results.css';\r\nimport { map, join } from 'lodash';\r\nimport format from './utils/string';\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\n\r\nfunction Results(props) {\r\n  let pinglist = join(map(props.list, (name) => \"@\" + name), \" \");\r\n  let keywords = join(props.keywords, \", \");\r\n  let results = props.text + keywords + format(\"result1\") + pinglist + format(\"result2\");\r\n  \r\n  return (\r\n    <div  className=\"Results\">\r\n      <CopyToClipboard text={results}>\r\n      <button>Copy</button>\r\n      </CopyToClipboard>\r\n      <div>\r\n      {results}\r\n      </div>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default Results;\r\n","export function toSet(array) {\r\n  return new Set(array);\r\n\r\n}","import React, { useState } from 'react';\r\nimport './Gasp.css';\r\nimport Rules from './Rules';\r\nimport Results from './Results';\r\nimport { flatten, map, clone, tap, keys, filter } from 'lodash';\r\nimport format from './utils/string';\r\nimport { Checkbox, Dropdown, Form, Radio } from '../node_modules/semantic-ui-react'\r\nimport { toSet } from './utils/utils'\r\nfunction Gasp(props) {\r\n  let [breedGender, setBreedGender] = useState(null);\r\n  let [type, setType] = useState(null);\r\n  let [resell, setResell] = useState(false);\r\n  let [keywords, setKeywords] = useState({keywords: {}});\r\n  let loading = true;\r\n  \r\n  const handleBGChange = (e, { value }) => setBreedGender(value);\r\n  const handleTypeChange = (e, { value }) => setType(value);\r\n  const handleResellChange = (e, { value }) => setResell(!resell);\r\n  const handleKeywordChange = (e, { value }) => {\r\n    let newState = clone(keywords);\r\n    if (newState.keywords[value]) {\r\n      delete newState.keywords[value];\r\n    }\r\n    else {\r\n      newState.keywords[value] = value;\r\n    }\r\n    setKeywords(newState);\r\n  };\r\n\r\n  let allKeywords = {};\r\n  // if(selected != null) {\r\n  //   allKeywords = flatten(Object.values(selected));\r\n  // }\r\n  let visibility = true;\r\n\r\n  let rules = [];\r\n  let breedGenderDropdown, typeRadio, resellToggle, keywordCheckboxes, resultingList;\r\n  if(props.strings && props.sheet) {\r\n    loading = false;\r\n    let filters = props.sheet.filters;\r\n    rules = getRules(props.strings.en);\r\n    let bgOptions = generateOptions(filters.Breed);\r\n    let typeOptions = filters.Type;\r\n    let keywordOptions = filters.Keywords;\r\n\r\n    breedGenderDropdown = \r\n      <div className=\"BreedGenderDropdown\">\r\n        <Dropdown \r\n        placeholder={props.strings.en.gaspbg} \r\n        fluid \r\n        selection \r\n        options={bgOptions} \r\n        onChange={handleBGChange} /></div>;\r\n    \r\n    typeRadio = <Form className=\"Type\">\r\n      <div className=\"Label\">What are you selling?</div>\r\n      <div className=\"RadioGroup\">\r\n      {map(typeOptions, t => \r\n          <Radio \r\n            className=\"Radio\"\r\n            key={t}\r\n            label={t}\r\n            name='typeGroup'\r\n            value={t}\r\n            checked={type === t}\r\n            onChange={handleTypeChange}\r\n          />\r\n        )}\r\n        </div>\r\n      </Form>;\r\n    resellToggle = <Checkbox \r\n                      className=\"Resell\"\r\n                      toggle \r\n                      label=\"Are you reselling?\"\r\n                      checked={resell}\r\n                      onChange={handleResellChange}/>\r\n    keywordCheckboxes = <div className=\"CheckboxWrapper\"><Form className=\"Keywords CheckboxContainer\">\r\n      {map(keywordOptions, k => \r\n          <Checkbox  \r\n            className=\"Checkbox\"\r\n            key={k}\r\n            label={k}\r\n            name='keywordGroup'\r\n            value={k}\r\n            checked={keywords[k]}\r\n            onChange={handleKeywordChange}\r\n          />\r\n        )}\r\n    </Form></div>\r\n  }\r\n\r\n  let keywordsSelected = breedGender && type && resell !== null && keys(keywords.keywords).length > 0;\r\n\r\n  let refresher = <div></div>;\r\n  let results = <div></div>;\r\n  \r\n\r\n  if(!loading && keywordsSelected) {\r\n    refresher = <div className=\"Refresh\">\r\n                  <button onClick={props.refresh}>refresh data and clear search terms</button>\r\n                </div>;\r\n    resultingList = filterUsers(props.sheet.users, breedGender, type, resell, keywords.keywords);\r\n    results = <Results className=\"Results\" visible={visibility} text={format(\"gaspresult\")} keywords={allKeywords} list={resultingList}/>\r\n  }\r\n\r\n\r\n  \r\n  return (\r\n    <div className=\"Gasp\">\r\n      <Rules className=\"Left Rules\" ruleset={rules} />\r\n      <div className=\"Right\">\r\n        <div className=\"GaspFormContainer\">\r\n          {breedGenderDropdown}\r\n          {resellToggle}\r\n          {typeRadio}\r\n          {keywordCheckboxes}\r\n        </div>\r\n        {/* {refresher} */}\r\n        {results}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getRules(obj) {\r\n  // rules support bbcode\r\n\r\n  let output = [];\r\n  \r\n  for (let t of Object.getOwnPropertyNames(obj)) {\r\n    if (t.length > 5 && t.substring(0, 4) === \"gasp\" && !isNaN(Number(t.substring(5))))\r\n      output.push(obj[t]);\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction generateOptions(array) {  \r\n  return map(array, (val) => {return {\r\n    key: val,\r\n    value: val,\r\n    text: val\r\n  }\r\n  });\r\n}\r\n\r\nfunction filterUsers(users, breedGender, type, resell, keywords) {\r\n  let selected = toSet(keys(keywords));\r\n  let output = map(filter(users, user => {\r\n    let blacklist = user.blacklist ? user.blacklist.split(', ') : [];\r\n    let whitelist = user.whitelist.split(', ');\r\n\r\n    return splitString(user, \"type\").has(type)\r\n      && splitString(user, \"breed\").has(breedGender)\r\n      && filter(whitelist, wl => wl === \"no preference\" || selected.has(wl)).length > 0\r\n      && !(resell && toSet(blacklist).has(\"resell\"))\r\n      && filter(blacklist, bl => selected.has(bl)).length === 0\r\n  }), \"user\");\r\n\r\n  console.log(output);\r\n  return output;\r\n}\r\n\r\nfunction splitString(obj, key) {\r\n  return toSet(obj[key].split(', '));\r\n}\r\nexport default Gasp;\r\n","import React, { useState } from 'react';\r\nimport './Cape.css';\r\nimport Rules from './Rules';\r\nimport Results from './Results';\r\nimport { flatten, map } from 'lodash';\r\nimport format from './utils/string';\r\n\r\nfunction Cape(props) {\r\n  let [selected, setSelected] = useState({});\r\n  let keywords;\r\n\r\n  if(selected != null) {\r\n    setSelected(null);\r\n    keywords = flatten(Object.values(selected));\r\n  }\r\n  let resultingList = [];\r\n  \r\n  let rules = [];\r\n  if(props.strings) {\r\n    rules = getRules(props.strings.en);\r\n  }\r\n  \r\n  return (\r\n    <div className=\"Cape\">\r\n      <Rules ruleset={rules} />\r\n      <div className=\"cape-form-container\">\r\n      </div>\r\n      <Results visible={true} text={format(\"caperesult\")} keywords={keywords} list={resultingList}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getRules(array) {\r\n  console.log(array);\r\n  let rules =  [\r\n    \"rules\",\r\n    \"gasprulenote\",\r\n    \"capecredit\",\r\n    \"capeincomplete\",\r\n    \"capethread\",\r\n    \"capediscord\",\r\n    \"duplicateremover\",\r\n    \"caperule1\",\r\n    \"caperule2\",\r\n    \"caperule3\",\r\n    \"caperule4\",\r\n    \"caperule5\",\r\n    \"caperule6\",\r\n    \"caperule7\"\r\n  ];\r\n\r\n  let output = [];\r\n  \r\n  // for (let t of Object.getOwnPropertyNames(array)) {\r\n  //   if (t.length > 8 && t.substring(0, 4) === \"cape\" && !isNaN(Number(t.substring(8))))\r\n  //     output.push(t);\r\n  // }\r\n\r\n  map(rules, rule => {\r\n    output.push(array[rule]);\r\n  });\r\n\r\n  return output;\r\n}\r\n\r\nexport default Cape;\r\n","export default {\r\n  apiKey: \"AIzaSyBahkdHqDbJNdhqALrVAM-wmoBgF5DGy58\",\r\n  discoverDocs: [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"],\r\n  capeSheetId: \"11hQSIUxyRx9wSgvemEX7Abn5g1hytODVp8v2tcmJxWA\",\r\n  gaspSheetId: \"1eX0iu8pFksHIqu66dFc3HjsGwLg6c8ZZ9Q-67MuAQPk\",\r\n  tlSheetId: \"1nW8XSGGoMUOlD-OlPuy91BR_4n57ZkmESFgnqKRIL9Q\",\r\n  clientId: \"975772038647-97kh79gkv6jqi62dknd4hhr1ch29b16j.apps.googleusercontent.com\",\r\n  spreadsheetId: \"1KTArYwDWrn52fnc7B12KvjRb6nmcEaU6gXYehWfsZSo\"\r\n}","import config from './config';\r\nimport { gapi } from 'gapi-script';\r\nimport { map, forEach } from 'lodash';\r\n\r\nexport function loadGasp(callback) {\r\n  gapi.client.load(\"sheets\", \"v4\", () => {\r\n    let values = gapi.client.sheets.spreadsheets.values;\r\n    let output = {filters: {}};\r\n      values.get({\r\n        spreadsheetId: config.gaspSheetId,\r\n        range: \"all keywords!A1:c200\",\r\n        majorDimension: \"COLUMNS\"\r\n      })\r\n      .then(\r\n        response => {\r\n          mapHeaders(response.result.values, output.filters);\r\n          values.get({\r\n            spreadsheetId: config.gaspSheetId,\r\n            range: \"masterlist!A1:e\"\r\n          })\r\n          .then(\r\n            response => {\r\n              let header = response.result.values.shift();\r\n              output.users = map(response.result.values, user => {\r\n                let out = {};\r\n                \r\n                out[header[0]] = user[0];\r\n                out[header[1]] = user[1];\r\n                out[header[2]] = user[2];\r\n                out[header[3]] = user[3];\r\n                out[header[4]] = user[4];\r\n\r\n                return out;});\r\n              callback(output);\r\n            },\r\n            response => error(callback, response));\r\n      }, \r\n    response => error(callback, response))\r\n  })};\r\n  \r\n  \r\nexport function loadCape(callback) {\r\n  gapi.client.load(\"sheets\", \"v4\", () => {\r\n    let values = gapi.client.sheets.spreadsheets.values;\r\n    let output = {filters: {}};\r\n    values\r\n      .get({\r\n        spreadsheetId: config.capeSheetId,\r\n        range: \"all keywords!A1:F100\",\r\n        majorDimension: \"COLUMNS\"\r\n      })\r\n      .then(\r\n        response => {\r\n          mapHeaders(response.result.values, output.filters);\r\n          values.get({\r\n            spreadsheetId: config.capeSheetId,\r\n            range: \"masterlist!A1:g\"\r\n          })\r\n          .then(\r\n            response => {\r\n              output.users = response.result.values;\r\n              callback(output);\r\n            },\r\n            response => error(callback, response));\r\n      },\r\n        response => error(callback, response));\r\n  });\r\n};\r\n    \r\nexport function loadStrings(callback) {\r\n  gapi.client.load(\"sheets\", \"v4\", () => {\r\n    let values = gapi.client.sheets.spreadsheets.values;\r\n    let output = {};\r\n    values\r\n      .get({\r\n        spreadsheetId: config.tlSheetId,\r\n        range: \"BBCode!A1:8\"\r\n      })\r\n      .then(\r\n        response => { \r\n          response = response.result.values;\r\n          let headers = response.shift();\r\n          map(response, (ruleset) => {\r\n            let key = ruleset[2].toLowerCase();\r\n            output[key] = {};\r\n            forEach(ruleset, (line, id) => {\r\n              output[key][headers[id]] = line;\r\n            }); \r\n          });\r\n          callback(output);\r\n        },\r\n        response => error(callback, response));\r\n  });\r\n};\r\n\r\nfunction error(callback, response) {\r\n  return callback(false, response.result.error);\r\n}\r\n\r\n// for mapping headers to values onto the output\r\nfunction mapHeaders(array, output) {\r\n  map(array, a => output[a.shift()] = a);\r\n}","import React from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport './react-tabs.css';\nimport './App.css';\nimport Gasp from './Gasp';\nimport Cape from './Cape';\nimport config from './utils/config';\nimport { gapi } from 'gapi-script';\n\nimport { loadGasp, loadCape, loadStrings } from './utils/sheet';\n\n\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      gasp: null,\n      cape: null,\n      strings: null\n    }\n  }\n  componentDidMount() {\n    gapi.load('client', this.initClient);\n  };\n  \n  initClient = () => {\n    gapi.client.init({\n      apiKey: config.apiKey,\n      discoveryDocs: config.discoveryDocs,\n      clientId: config.clientId,\n      scope: \"https://www.googleapis.com/auth/spreadsheets.readonly\"\n    }).then(() => {\n      this.loadData();\n    }, response => console.log(response));\n  }\n\n  loadData = () => {\n    loadGasp(this.setGasp);\n    loadCape(this.setCape);\n    loadStrings(this.setStrings);\n  }\n\n  setGasp = (data, error) => {\n    console.log(error);\n    if(error) {\n      console.log(error);\n    }\n    else {\n      this.setState({gasp: data});\n    }\n  };\n  setCape = (data, error) => {\n    if(error) {\n      console.log(error);\n    }\n    else {\n      this.setState({cape: data});\n    }\n  };\n  setStrings = (data, error) => {\n    if(error) {\n      console.log(error);\n    }\n    else {\n      this.setState({strings: data});\n    }\n  };\n\n  render() {\n    return <div className=\"App\">\n        <Tabs>\n          <TabList>\n            <Tab>GASP</Tab>\n            {/* <Tab className=\"react-tabs__tab--disabled\">CAPE</Tab> */}\n          </TabList>\n          <TabPanel>\n            <Gasp refresh={this.loadData} sheet={this.state.gasp} strings={this.state.strings} />\n          </TabPanel>\n          <TabPanel>\n            <Cape sheet={this.state.cape} strings={this.state.strings} />\n          </TabPanel>\n        </Tabs>\n      </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}